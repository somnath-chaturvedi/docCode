import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.wml.*;
import org.json.*;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.math.BigInteger;
import java.util.Iterator;

public class MergeDocxJson {
    public static void main(String[] args) throws Exception {
        JSONObject json1 = new JSONObject(new String(Files.readAllBytes(Paths.get("doc1.json"))));
        JSONObject json2 = new JSONObject(new String(Files.readAllBytes(Paths.get("doc2.json"))));

        WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.createPackage();

        mergeJsonToDocx(json1, wordMLPackage);
        mergeJsonToDocx(json2, wordMLPackage);

        wordMLPackage.save(new File("merged.docx"));
        System.out.println("Merged DOCX created successfully!");
    }

    private static void mergeJsonToDocx(JSONObject json, WordprocessingMLPackage wordMLPackage) {
        if (json.has("body")) {
            JSONObject body = json.getJSONObject("body");
            if (body.has("p")) {
                JSONArray paragraphs = body.getJSONArray("p");
                for (int i = 0; i < paragraphs.length(); i++) {
                    addParagraph(paragraphs.getJSONObject(i), wordMLPackage);
                }
            }
            if (body.has("sectPr")) {
                applySectionProperties(body.getJSONObject("sectPr"), wordMLPackage);
            }
        }
    }

    private static void addParagraph(JSONObject json, WordprocessingMLPackage wordMLPackage) {
        ObjectFactory factory = new ObjectFactory();
        P paragraph = factory.createP();
        R run = factory.createR();
        Text text = factory.createText();
        
        if (json.has("t")) {
            text.setValue(json.getString("t"));
        }
        if (json.has("space")) {
            text.setSpace(json.getString("space"));
        }
        run.getContent().add(text);
        paragraph.getContent().add(run);

        if (json.has("ppr")) {
            PPr ppr = factory.createPPr();
            if (json.getJSONObject("ppr").has("ind")) {
                Ind ind = factory.createInd();
                ind.setLeft(BigInteger.valueOf(json.getJSONObject("ppr").getInt("ind")));
                ppr.setInd(ind);
            }
            paragraph.setPPr(ppr);
        }
        
        wordMLPackage.getMainDocumentPart().addObject(paragraph);
    }

    private static void applySectionProperties(JSONObject sectPr, WordprocessingMLPackage wordMLPackage) {
        ObjectFactory factory = new ObjectFactory();
        SectPr sectionProperties = factory.createSectPr();
        if (sectPr.has("pgSz")) {
            SectPr.PgSz pgSz = factory.createSectPrPgSz();
            pgSz.setW(BigInteger.valueOf(sectPr.getJSONObject("pgSz").getInt("w")));
            pgSz.setH(BigInteger.valueOf(sectPr.getJSONObject("pgSz").getInt("h")));
            if (sectPr.getJSONObject("pgSz").has("orient")) {
                pgSz.setOrient(STPageOrientation.fromValue(sectPr.getJSONObject("pgSz").getString("orient")));
            }
            sectionProperties.setPgSz(pgSz);
        }
        
        if (sectPr.has("pgMar")) {
            SectPr.PgMar pgMar = factory.createSectPrPgMar();
            pgMar.setTop(BigInteger.valueOf(sectPr.getJSONObject("pgMar").getInt("top")));
            pgMar.setBottom(BigInteger.valueOf(sectPr.getJSONObject("pgMar").getInt("bottom")));
            pgMar.setLeft(BigInteger.valueOf(sectPr.getJSONObject("pgMar").getInt("left")));
            pgMar.setRight(BigInteger.valueOf(sectPr.getJSONObject("pgMar").getInt("right")));
            sectionProperties.setPgMar(pgMar);
        }
        
        wordMLPackage.getMainDocumentPart().addObject(sectionProperties);
    }
}
