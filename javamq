import org.apache.activemq.transport.stomp.Stomp;
import org.apache.activemq.transport.stomp.StompConnection;
import java.io.ByteArrayOutputStream;
import java.nio.file.*;
import java.util.*;
import java.util.UUID;
import java.util.zip.*;

public class SyncBatchSender {
    public static void main(String[] args) throws Exception {
        StompConnection connection = new StompConnection();
        connection.open("localhost", 61613);
        connection.connect("admin", "admin");

        // Create batch ID and response queue
        String batchId = UUID.randomUUID().toString();
        String replyQueue = "/temp-queue/response-" + batchId;
        
        // 1. Create ZIP batch
        ByteArrayOutputStream zipStream = new ByteArrayOutputStream();
        try (ZipOutputStream zipOut = new ZipOutputStream(zipStream)) {
            for (String filePath : Arrays.asList("file1.txt", "file2.txt")) {
                byte[] content = Files.readAllBytes(Paths.get(filePath));
                zipOut.putNextEntry(new ZipEntry(Paths.get(filePath).getFileName().toString()));
                zipOut.write(content);
                zipOut.closeEntry();
            }
        }

        // 2. Subscribe to response queue FIRST
        connection.subscribe(replyQueue, Stomp.Headers.Subscribe.AckModeValues.AUTO);

        // 3. Send batch with metadata
        Map<String, String> headers = new HashMap<>();
        headers.put("batch-id", batchId);
        headers.put("reply-to", replyQueue);
        headers.put("operation", "combine");
        connection.send("/queue/batch.process", headers, zipStream.toByteArray());

        // 4. Wait for processed result
        System.out.println("Waiting for processed batch...");
        while (true) {
            StompFrame response = connection.receive();
            if (batchId.equals(response.getHeaders().get("batch-id"))) {
                // Save combined result
                Files.write(Paths.get("combined_result.zip"), response.getBody());
                System.out.println("Received combined file!");
                break;
            }
        }

        connection.disconnect();
    }
}
