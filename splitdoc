import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.wml.*;

public class SplitDocxByHeading {

    public static void main(String[] args) throws Exception {
        String inputFilePath = "input.docx"; // Change this to your input file
        String outputFolder = "output/"; // Ensure this folder exists

        WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(new File(inputFilePath));
        MainDocumentPart documentPart = wordMLPackage.getMainDocumentPart();
        
        List<Object> content = documentPart.getContent();
        List<Object> sectionContent = new ArrayList<>();
        String currentHeading = null;

        for (Object obj : content) {
            if (obj instanceof P) {
                P paragraph = (P) obj;
                String headingText = getHeadingText(paragraph);

                if (headingText != null) {
                    // Save previous section if it exists
                    if (currentHeading != null) {
                        saveNewDocument(sectionContent, outputFolder + sanitizeFilename(currentHeading) + ".docx", wordMLPackage);
                        sectionContent.clear();
                    }
                    currentHeading = headingText;
                }
            }
            if (currentHeading != null) {
                sectionContent.add(obj);
            }
        }

        // Save the last section
        if (!sectionContent.isEmpty() && currentHeading != null) {
            saveNewDocument(sectionContent, outputFolder + sanitizeFilename(currentHeading) + ".docx", wordMLPackage);
        }

        System.out.println("Splitting completed!");
    }

    private static String getHeadingText(P paragraph) {
        if (paragraph.getPPr() != null && paragraph.getPPr().getPStyle() != null) {
            String style = paragraph.getPPr().getPStyle().getVal();
            if (style.startsWith("Heading")) { // Check for Heading styles
                return paragraph.toString();
            }
        }
        return null;
    }

    private static String sanitizeFilename(String filename) {
        return filename.replaceAll("[^a-zA-Z0-9]", "_"); // Replace special characters
    }

    private static void saveNewDocument(List<Object> content, String filePath, WordprocessingMLPackage originalDoc) throws Exception {
        WordprocessingMLPackage newDoc = WordprocessingMLPackage.createPackage();
        newDoc.getMainDocumentPart().getContent().addAll(content);

        // Copy headers and footers
        newDoc.getDocumentModel().getSections().get(0).getHeaderFooterPolicy()
              .deepCopy(originalDoc.getDocumentModel().getSections().get(0).getHeaderFooterPolicy());

        // Preserve page size, margins, and section properties
        newDoc.getDocumentModel().getSections().get(0).setSectPr(
              originalDoc.getDocumentModel().getSections().get(0).getSectPr());

        newDoc.save(new File(filePath));
        System.out.println("Saved: " + filePath);
    }
}
